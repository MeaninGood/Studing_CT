# 연산 수가 n에 비례 : O(n)
# 연산 수가 n^2에 비례 : O(n^2)

'''
n = 10
total = 0
for i in range(1000000):
    total += i
    
for i in range(n):
    arr[i] += total
    
이런 코드가 있을 때,
위에 거는 n이 100만 번 도는데,
밑은 10번 밖에 안 돎

O(n + 1000000)

for i in range(n):
    for j in range(n):
        arr[i][j] += total
        
O(n^2 + 10000000)

상수는 주로 안 적음
제일 큰 단위 위주로 적음
'''

'''
# 카운팅 소트

# n이 크다면 이게 더 오래 걸리고
cnt = [0 for i in range(1000010)]
for i in arr:
    cnt[i] += 1

# n이 작다면 이게 더 오래 걸림
for i in range(1000010):
    for _ in range(cnt[i]):
        arr2.append(i)
        
이런 경우 O(N + K)라고 부름
무조건 뭐가 더 크다고 말할 수 없다
'''


## 시간

# 1초 연산 1억번 가능
# 2초 : 2억번 안에 해라

'''
n = 1000
m = 10000

O(n^2) => 100만 번
O(nm) => 1000만 번

for i in range(n):
    for j in range(m):
        돌려도 된다
        
O(n^3) => 10억 번 / 2초 시간 안에 못 도는 연산

O(M^2) => 1억 번이 됨
'''

'''
# 이름                      시간복잡도      n제한
순열(백트래킹 1,2번 템플릿)       n!         8-10
조합(백트래킹 3,4번 템플릿)      2^n        15-20
3중 for문                      n^3        100-300
2차원 dp                      n^2~3      100-1000, 300~500(어지간하면 2차원 dp)
2중 for문                     n^2        1000-3000
정렬, 이진탐색                 nlogn     100,000-200,000
스택, 투포인터                  n        100,000-1,000,000
'''



# 메모리 제한
# int 하나에 4byte 파이썬은 8byte라고 생각하는 게 편함
# long 하나 8바이트

# 1000개 : 8KB
# 100만 : 8MB

# 삼성 코테, swea 문제들
# 메모리제한 128MB, 스택 메모리 1MB
## 스택 메모리 : 지역변수, 함수
## 좀 커진다 싶으면 전역변수(global 써라)
## dfs로 짰는데 통과가 안된다 -> bfs로 짜라



# 정수 크기
## 자바 int         21억 4700만 조금 넘는 수    2 * 10^9 조금 넘는 수
## 자바 long        위의 제곱 * 2               9 * 10^18 조금 넘는 수


# a = 10억
# b = 10억

# ans = a * b (10억 * 10억이 들어가서 overflow)


# 파이썬은 수 크기 제한이 없다
# 기본적으로 long으로 계산하다가, 더 커지면 Biginteger(문자열 계산)으로 바뀜



## 항상 언제나 제일 큰 수를 무조건 넣어 봐라
## 극단적인 케이스들(가장 작은 거, 가장 큰 거 넣어 보기)
